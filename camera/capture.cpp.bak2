#include "stdio.h"
#include "opencv/highgui.h"
#include "ASICamera2.h"
#include <time.h>
#include <unistd.h>
#include <sys/time.h>
#include <string.h>
#include <stdlib.h>

static unsigned long GetTickCount()
{
#ifdef _MAC
    struct timeval  now;
    gettimeofday(&now, NULL);
    unsigned long ul_ms = now.tv_usec/1000 + now.tv_sec*1000;
    return ul_ms;
#else
   struct timespec ts;
   clock_gettime(CLOCK_MONOTONIC,&ts);
   return (ts.tv_sec*1000 + ts.tv_nsec/(1000*1000));
#endif
}

char* getTime(){
	static int seconds_last = 99;
	char TimeString[128];
	timeval curTime;
	gettimeofday(&curTime, NULL);
	if (seconds_last == curTime.tv_sec)
    return 0;

	seconds_last = curTime.tv_sec;
	strftime(TimeString, 80, "%Y%m%d %H:%M:%S", localtime(&curTime.tv_sec));
    return TimeString;
}


int main (int argc, char * argv[])
{

int time1,time2,timeSave;
int count=0;

int bMain=1;
char buf[1024]={0};

std::string fileName = "IMAGE.JPG";

int width=0;
int height=0;
int bin=1, Image_type;
int asiGain=50;
int asiBandwidth=40;
int asiExposure=50000;
int asiWBR=50;
int asiWBB=50;

IplImage *pRgb;

char const* bayer[] = {"RG","BG","GR","GB"};
int CamNum=0;
int i;





 int opt;
  while ((opt = getopt (argc, argv, "w:h:e:t:")) != -1)
  {
    switch (opt)
    {
      	case 'w':
	width=atoi(optarg);
	printf("width: %d", width);
	  break;
	case 'h':
	height=atoi(optarg);
	printf("height: %d", height);
	  break;
 	case 'e':
        asiExposure=atoi(optarg);
        printf("exp: %d", asiExposure);
          break;
	 case 't':
        Image_type=atoi(optarg);
        printf("type: %d", Image_type);
          break;
    }
  }





int numDevices = ASIGetNumOfConnectedCameras();
    if(numDevices <= 0)
    	{
	printf("\nNo Connected Camera...\n");
	width=1;	//Set to 1 when NO Cameras are connected to avoid error: OpenCV Error: Insufficient memory
	height=1;	//Set to 1 when NO Cameras are connected to avoid error: OpenCV Error: Insufficient memory
	}
    else
	printf("\nListing Attached Cameras:\n");

ASI_CAMERA_INFO ASICameraInfo;
    for(i = 0; i < numDevices; i++)
    {
	ASIGetCameraProperty(&ASICameraInfo, i);
	printf("CameraID: %d %s\n",i, ASICameraInfo.Name);
    }

if(ASIOpenCamera(CamNum) != ASI_SUCCESS)
	{
		printf("Open Camera ERROR, Check that you have root permissions!\n");
	}

	printf("\n%s Information:\n",ASICameraInfo.Name);
	int iMaxWidth, iMaxHeight;
	iMaxWidth = ASICameraInfo.MaxWidth;
	iMaxHeight =  ASICameraInfo.MaxHeight;
	printf("Resolution:%dx%d\n", iMaxWidth, iMaxHeight);
	if(ASICameraInfo.IsColorCam)
		printf("Color Camera: bayer pattern:%s\n",bayer[ASICameraInfo.BayerPattern]);
	else
		printf("Mono camera\n");


ASI_CONTROL_CAPS ControlCaps;
	int iNumOfCtrl = 0;
	ASIGetNumOfControls(CamNum, &iNumOfCtrl);

	for( i = 0; i < iNumOfCtrl; i++)
	{
		ASIGetControlCaps(CamNum, i, &ControlCaps);
		printf("%s\n", ControlCaps.Name);
	}

	if(width == 0 || height == 0)
	{
		width = iMaxWidth;
		height = iMaxHeight;
	}

	long ltemp = 0;
	ASI_BOOL bAuto = ASI_FALSE;
	ASIGetControlValue(CamNum, ASI_TEMPERATURE, &ltemp, &bAuto);
	printf("sensor temperature:%02f\n", (float)ltemp/10.0);
	printf("\nCapture Settings:\n Resolution: %dx%d\n Exposure: %d\n Binning: %d\n Image Type: %d\n\n", width, height, asiExposure, bin, Image_type);


	//ASIGetROIFormat(CamNum, &width, &height, &bin, (ASI_IMG_TYPE*)&Image_type);
	if(Image_type == 0)//ASI_IMG_RAW16
		{
		printf("\n\nASI_IMG_RAW16\n\n");
		pRgb=cvCreateImage(cvSize(width, height), IPL_DEPTH_16U, 3);
		}
	else if(Image_type == 1)//ASI_IMGRGB24
		{
		printf("\n\nASI_IMG_RGB24\n\n");
		pRgb=cvCreateImage(cvSize(width, height), IPL_DEPTH_8U, 3);
		}
	else	{
		printf("\n\nASI_IMG_RAW8\n\n");
		pRgb=cvCreateImage(cvSize(width, height), IPL_DEPTH_8U, 1);
		}

//	pRgb=cvCreateImage(cvSize(width, height), IPL_DEPTH_8U, 3);

	ASISetControlValue(CamNum, ASI_TEMPERATURE, 50*1000, ASI_FALSE);
	ASISetControlValue(CamNum, ASI_GAIN, asiGain, ASI_FALSE);
	ASISetControlValue(CamNum, ASI_BANDWIDTHOVERLOAD, asiBandwidth, ASI_FALSE);
	ASISetControlValue(CamNum, ASI_EXPOSURE, asiExposure, ASI_FALSE);
	ASISetControlValue(CamNum, ASI_WB_R, asiWBR, ASI_FALSE);
	ASISetControlValue(CamNum, ASI_WB_B, asiWBB, ASI_FALSE);

	time1 = GetTickCount();
	timeSave = GetTickCount();

	ASI_EXPOSURE_STATUS status;
	int iDropped = 0;
	while(bMain)
	{
		ASIStartExposure(CamNum, ASI_FALSE);
		usleep(10000);//10ms
		status = ASI_EXP_WORKING;
		while(status == ASI_EXP_WORKING)
		{
			ASIGetExpStatus(CamNum, &status);
		}
		if(status == ASI_EXP_SUCCESS){
			ASIGetDataAfterExp(CamNum, (unsigned char*)pRgb->imageData, pRgb->imageSize);
		}
		time2 = GetTickCount();
		count++;
		if(time2-time1 > 1000 )
		{
			ASIGetDroppedFrames(CamNum, &iDropped);
			sprintf(buf, "fps:%d dropped frames:%lu ImageType:%d",count, iDropped, Image_type);
			sprintf(buf, "%s", getTime());
			count = 0;
			time1=GetTickCount();
			printf(buf);
			printf(".");
			printf("\n");
		}
		if (time2 - timeSave > 5000) 
		  {
			cvSaveImage( fileName.c_str(), pRgb );
			timeSave = GetTickCount();
		  }
		if(Image_type != ASI_IMG_RGB24 && Image_type != ASI_IMG_RAW16)
		{
			cvSet(pRgb, CV_RGB(180, 180, 180));
			cvResetImageROI(pRgb);
		}
	}
END:


return 0;
}
